include<lib/vase_functions.scad>;
FN=8;
DIA = 5;
BASE=15;
BOTTOM_ANGLE=30;
DIAG_LENGTH=25;
RISER = BASE * 2;
SHALLOW_OUT=4;
STEEP_OUT=SHALLOW_OUT * 2;
TILT=10;
OCTOGON_HEIGHT = (2 * cos(BOTTOM_ANGLE) * DIAG_LENGTH + RISER) * cos(TILT);
OCTOGON_OVERLAP_HEIGHT = OCTOGON_HEIGHT;
OCTOGON_WIDTH = BASE + 2 * sin(BOTTOM_ANGLE) * DIAG_LENGTH;
OCTOGON_OVERLAP_WIDTH = OCTOGON_WIDTH - DIA / 2;
BASE_RAD = tan(67.5) * OCTOGON_OVERLAP_WIDTH / 2;

module octogon() {
  bar([-BASE / 2, 0, 0], [BASE / 2, 0, 0]) ;
  bar([BASE / 2, 0, 0], [(BASE / 2) + sin(BOTTOM_ANGLE) * DIAG_LENGTH, 0, cos(BOTTOM_ANGLE) * DIAG_LENGTH]);
  bar([-BASE / 2, 0, 0], [-(BASE / 2) - sin(BOTTOM_ANGLE) * DIAG_LENGTH, 0, cos(BOTTOM_ANGLE) * DIAG_LENGTH]);
  bar([(BASE / 2) + sin(BOTTOM_ANGLE) * DIAG_LENGTH, 0, cos(BOTTOM_ANGLE) * DIAG_LENGTH], [(BASE / 2) + sin(BOTTOM_ANGLE) * DIAG_LENGTH, 0, cos(BOTTOM_ANGLE) * DIAG_LENGTH + RISER]);
  bar([-(BASE / 2) - sin(BOTTOM_ANGLE) * DIAG_LENGTH, 0, cos(BOTTOM_ANGLE) * DIAG_LENGTH], [-(BASE / 2) - sin(BOTTOM_ANGLE) * DIAG_LENGTH, 0, cos(BOTTOM_ANGLE) * DIAG_LENGTH + RISER]);
  bar([-(BASE / 2) - sin(BOTTOM_ANGLE) * DIAG_LENGTH, 0, cos(BOTTOM_ANGLE) * DIAG_LENGTH + RISER], [-(BASE / 2), 0, 2 * cos(BOTTOM_ANGLE) * DIAG_LENGTH + RISER]);
  bar([(BASE / 2) + sin(BOTTOM_ANGLE) * DIAG_LENGTH, 0, cos(BOTTOM_ANGLE) * DIAG_LENGTH + RISER], [(BASE / 2), 0, 2 * cos(BOTTOM_ANGLE) * DIAG_LENGTH + RISER]);
  bar([-(BASE / 2), 0, 2 * cos(BOTTOM_ANGLE) * DIAG_LENGTH + RISER], [(BASE / 2), 0, 2 * cos(BOTTOM_ANGLE) * DIAG_LENGTH + RISER]);
  bar([-(BASE / 2) - sin(BOTTOM_ANGLE) * DIAG_LENGTH, 0, cos(BOTTOM_ANGLE) * DIAG_LENGTH], [0, SHALLOW_OUT, cos(BOTTOM_ANGLE) * DIAG_LENGTH + RISER / 2]);
  bar([0, SHALLOW_OUT, cos(BOTTOM_ANGLE) * DIAG_LENGTH + RISER / 2], [(BASE / 2) + sin(BOTTOM_ANGLE) * DIAG_LENGTH, 0, cos(BOTTOM_ANGLE) * DIAG_LENGTH + RISER]);
  bar([-BASE / 2, 0, 0], [0, -STEEP_OUT, cos(BOTTOM_ANGLE) * DIAG_LENGTH + RISER / 2]);
  bar([0, -STEEP_OUT, cos(BOTTOM_ANGLE) * DIAG_LENGTH + RISER / 2], [(BASE / 2), 0, 2 * cos(BOTTOM_ANGLE) * DIAG_LENGTH + RISER]);
}
stack(OCTOGON_HEIGHT, 5) {
  ring(OCTOGON_OVERLAP_WIDTH, 8) rotate([-TILT, 0, 0]) octogon();
  translate([0, 0, OCTOGON_HEIGHT]) mirror([0, 0, 1]) ring(OCTOGON_OVERLAP_WIDTH, 8) rotate([-TILT, 0, 0]) octogon();
}
